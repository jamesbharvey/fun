#!/usr/bin/perl

# vim: filetype=perl5
#
# needs unrar-nonfree
# needs unzip 
# needs imagemagic "convert" utility
# needs gs (ghostscript)
#
#  sudo apt-get install \
#               ghostscript \
#               imagemagick \
#               unzip \
#               unrar-nonfree \
#               liburi-encode-perl \
#               libimage-magick-perl \

use feature qw(say);
use warnings;
use strict;
use autodie;
use File::Basename qw(basename);
use URI::Encode;
use FindBin;
use lib "$FindBin::Bin/../lib/perl";
use Text::Wrapper;
use File::Basename;
use Archive::Zip qw(:ERROR_CODES);
use Image::Magick;
use File::Copy;
use Cwd 'abs_path';

my $verbose = 1;


sub make_thumbnail_from_first_page { 
    my ($archive_file, $first_page) = @_;
    my $thumbnail_name = "$archive_file.jpg";
    my @suffix_list = qw( jpg gif png );
    my ($name,$path,$suffix) = fileparse($first_page,@suffix_list);
    my $image = Image::Magick->new;
    my $error = $image->Read("$name$suffix");
    if ($error) {
        make_default_thumbnail($archive_file);
        warn "$error, archive, first_page [$archive_file][$first_page]";
        return;
    }
    $error = $image->Resize(geometry =>'x615');
    if ($error) {
        make_default_thumbnail($archive_file);
        warn "$error, archive, first_page [$archive_file][$first_page]";
        return;
    }
    $error = $image->Write($thumbnail_name);
    if ($error) {
        make_default_thumbnail($archive_file);
        warn "$error, archive, first_page [$archive_file][$first_page]";
        return;
    }
    
    #if (system("convert", "$name$suffix", "-resize", "x615", $thumbnail_name)) {
    #   make_default_thumbnail($archive_file);
    #   return;
    #}
    unlink("$name$suffix") if -f "$name$suffix";
    unlink($first_page) if -f $first_page;
}

my $wrapper = Text::Wrapper->new(columns => 34);

sub make_default_thumbnail {
    my $archive_file = shift;
    my $label = $wrapper->wrap($archive_file);
    system ("convert",
            "-background", "lightblue",
            "-fill", "blue",
            "-font", "FreeSans",
            "-pointsize","24",
            "-gravity", "center",
            "-size", "400x615",
            "caption:$archive_file",
            "$archive_file.jpg"
        );
}

opendir (my $dir_handle,".") || die "can't opendir '.' ";
my @cbr_files = sort grep { /\.cbr$/i && -f } readdir($dir_handle);
rewinddir($dir_handle);
my @cbz_files = sort grep { /\.cbz$/i && -f } readdir($dir_handle);
rewinddir($dir_handle);
my @pdf_files = sort grep { /\.pdf$/i && -f } readdir($dir_handle);

for (@cbr_files) {
    my $rar_file = $_;
    my $abs_path = abs_path($rar_file);
    say "doing file ",$abs_path if $verbose;
    Encode::_utf8_on($rar_file); #risky but it fixed some broken links
    next if -f "$rar_file.jpg";
    my $quoted_rar_file = quotemeta($rar_file);
    my $first_page;
    my $lines;
    if (! open($lines, "unrar lb $quoted_rar_file |" )) {
        make_default_thumbnail($rar_file);
        next;
    }
    my @jpgs;
    while (<$lines>) {
 	chomp; 
	next unless /\.(jpg|gif|png)$/i;
	next unless /\d/;
	push @jpgs, $_;
    }
    @jpgs = sort @jpgs;
    $first_page = $jpgs[0];
    Encode::_utf8_on($first_page); #risky but it fixed some broken links
    #$first_page =~ s/^\s+//;
    my $quoted_first_page = quotemeta($first_page);
    if ( system("unrar e -o+ -y -inul $quoted_rar_file $quoted_first_page") ) {
        make_default_thumbnail($rar_file);
        next;
    }
    make_thumbnail_from_first_page($rar_file,$first_page);
}

for (@cbz_files) {
    my $zip_file = $_;
    my $abs_path = abs_path($zip_file);
    say "doing file ",$abs_path if $verbose;
    next if -f "$zip_file.jpg";
    my $zip = Archive::Zip->new();
    my $status = $zip->read($zip_file);
    die "Read of $zip_file failed\n" if $status != AZ_OK;

    my $quoted_zip_file = quotemeta($zip_file);
    my $first_page;
    my $lines;
    if (! open($lines, "unzip -l $quoted_zip_file |")) {
       make_default_thumbnail($zip_file);
        next;
    }
    my @jpgs;
    while (<$lines>) {
	my $path;
	chomp;
	next unless /\.(jpg|gif|png)$/i;
	next unless /\s+\d+\s+\d{4}\-\d\d\-\d\d\s+\d\d\:\d\d\s+(\S+.*)$/;
	$path = $1;
	push @jpgs, $path;
    }
    @jpgs = sort @jpgs;
    $first_page = $jpgs[0];
    my $quoted_first_page = quotemeta($first_page);
    Encode::_utf8_on($first_page); #risky but it fixed some broken links        
    #$first_page =~ s/^\s+//;
    $status = $zip->extractMemberWithoutPaths($first_page);
    if ($status != AZ_OK && ! -f $first_page) {
         make_default_thumbnail($zip_file);
         next;
    }
    make_thumbnail_from_first_page($zip_file,$first_page);
}

for (@pdf_files) {
    next if -f "$_.jpg";
    my $abs_path = abs_path($_);
    say "doing file [$abs_path]...";
    if ( system("gs",
	   "-q",
	   "-dBATCH",
	   "-dNOPAUSE",
	   "-dSAFER",
	   "-dFirstPage=1",
	   "-dLastPage=1",
	   "-sDEVICE=jpeg",
           "-dJPEGQ=30",
#	   "-r475x615",
           "-r400x615",
	   "-sOutputFile=$_.jpg",
	   $_
         )) {
        make_default_thumbnail($_);
    }
}

opendir ($dir_handle,".") || die "can't opendir '.' ";
@cbr_files = grep { /\.cbr$/i && -f } readdir($dir_handle);
rewinddir($dir_handle);
@cbz_files = grep { /\.cbz$/i && -f } readdir($dir_handle);
rewinddir($dir_handle);
@pdf_files = grep { /\.pdf$/i && -f } readdir($dir_handle);
rewinddir($dir_handle);
my @dirs = grep { -d && $_ ne '.' && $_ ne '..' } readdir($dir_handle);

my $asset_dir = "$FindBin::Bin/../assets";
copy "$asset_dir/wikimedia_commons_up_arrow.svg", "up_arrow.svg";

if (@dirs > 0) {
    copy "$asset_dir/wikimedia_commons_right_arrow.svg", "right_arrow.svg";
}

open my $index_file, ">", "index.html";

select $index_file;
say "<html>";
say "<head>";
say "     <title>comic index</title>";
say "     <style>";
say "         .directory {";
say "           display: grid;";
say "           grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));";
say "           grid-gap: 32px;";
say "           grid-auto-flow: dense;";
say "         }";
say "         .otherdirectories {";
say "           display: list-item;";
say "         }";
say "         .otherdirectories a {";
say "           display: flex;";
say "           align-items: center;";
say "           font-size: x-large;";
say "         }";
say "         ";
say "         /* Single column display for phones */";
say "        \@media (max-width: 459px) {";
say "           .directory {";
say "             display: flex;";
say "             flex-direction: column;";
say "           }";
say "         }";
say "         .wrapper {
            width: 100%;
            display: flex;
            flex-wrap: wrap;
            align-items: flex-start;
            justify-content: space-between;
            row-gap: 20px;
        }";
say "    </style>";
say "</head>";
say "<body>";
say "  <div class=\"otherdirectories\">";
say "    <article class=\"article\"><a href=\"..\"><img src=\"up_arrow.svg\" height=\"52\" width=\"72\"></a>";
say "    </article>";
say "  </div>";
if (@dirs > 0) {
say "   <br>";
say "  <div class=\"otherdirectories\">";
    for (sort @dirs) {
say "    <article class=\"article\"><a href=\"$_\"><img src=\"right_arrow.svg\" height=\"52\" width=\"72\">$_</a>";
say "    </article>"
    }
say "</div>"
}
say "  <br>";
say "    <div class=\"wrapper\">";
my @all_files = sort ( @cbr_files, @cbz_files, @pdf_files) ;
for (@all_files) {
    Encode::_utf8_on($_); #risky but it fixed some broken links
    my $archive = URI::Encode::uri_encode($_, { encode_reserved => 1 } );
    say "        <div>";
    say "            <a href=\"$archive\"><img src=\"$archive.jpg\"></a>";
    say "        </div>";
}

say "    </div>";
say "</body>";
say "</html>";
close $index_file;    
    
